/*
    * Oxyde Language Grammar
    * This file defines the grammar for the Oxyde programming language.
    * It is written in Pest, a PEG parser generator for Rust.
    * @version 0.1.0
*/

// ---------------------
// Top-level structure
// ---------------------

program = { SOI ~ statements ~ EOI }

statements = { statement* }

// Each statement is either:
// - assignment statement (with semicolon)
// - expression statement (with semicolon)
// - while statement (no semicolon)
// - function definition (no semicolon)
statement = {
    assignment_stmt
  | expression_stmt
  | while_statement
  | function_definition
}

// An assignment plus its trailing semicolon.
assignment_stmt = {
    assignment ~ ";"
}

// A bare expression plus a trailing semicolon (like `myFunc(1,2);` or `x+2;`)
expression_stmt = {
    expression ~ ";"
}

// ---------------------
// Compound statements
// ---------------------

while_statement = {
    "while" ~ "(" ~ expression ~ ")" ~ "{" ~ statements ~ "}"
}

function_definition = {
    "func" ~ identifier ~ "(" ~ parameters? ~ ")" ~ "{" ~ statements ~ "}"
}

parameters = {
    identifier ~ ("," ~ identifier)*
}

// ---------------------
// Core expression rules
// ---------------------

eq_op  = { "==" | "!=" }
rel_op = { ">" | "<" | ">=" | "<=" }
add_op = { "+" | "-" }
mul_op = { "*" | "/" | "%" }

expression = {
    equality_expr
}

equality_expr       = { relational_expr ~ (eq_op ~ relational_expr)* }
relational_expr     = { additive_expr ~ (rel_op ~ additive_expr)* }
additive_expr       = { multiplicative_expr ~ (add_op ~ multiplicative_expr)* }
multiplicative_expr = { unary_expr ~ (mul_op ~ unary_expr)* }

unary_op = { "+" | "-" }

unary_expr = {
    primary_expr
  | (unary_op ~ primary_expr)
}

// ---------------------
// Primary expressions
// ---------------------

primary_expr = {
    function_call
  | literal
  | identifier
  | "(" ~ expression ~ ")"
}

function_call = {
    identifier ~ "(" ~ arguments? ~ ")"
}

arguments = {
    expression ~ ("," ~ expression)*
}

// ---------------------
// Assignment & Identifier
// ---------------------

assignment = {
    identifier ~ "=" ~ expression
}

identifier = @{
    ("_" | ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")*
}

// ---------------------
// Literals
// ---------------------

literal = {
    number
  | string
  | bool
  | null
}

string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"? ~ int ~ (("." ~ ASCII_DIGIT+ ~ exp?) | exp)?
}
int    = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
exp    = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

bool = { "true" | "false" }
null = { "null" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
